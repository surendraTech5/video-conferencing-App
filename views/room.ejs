<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meet</title>
    <script>
      const ROOM_ID = "<%= roomId %>";
      document.title += " | " + ROOM_ID;
    </script>
    <link rel="shortcut icon" type="image/x-icon" href="/assets/images/favicon.svg" />

    <!-- libraries -->
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
      integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk"
      crossorigin="anonymous"
    />
    <script defer src="lib/peerjs.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-auth.js"></script>
    <script src="https://kit.fontawesome.com/c939d0e917.js"></script>

    <!-- scripts -->
    <script src="/js/firebaselogin.js"></script>
    <script src="/js/logout.js"></script>
    <script src="script.js" defer></script>

    <!-- css -->
    <link rel="stylesheet" href="/styles/room.css" />

    <!-- Teachable Machine and TensorFlow.js -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>

    <style>
      
      #posture-toggle-btn {
        position: fixed;
        top: 0px;
        left: 0px;
        padding: 8px 16px;
        border: none;
        margin: 10px;
        border-radius: 8px;
        font-size: 14px;
        cursor: pointer;
        color: white;
        background-color: #4caf50;
        transition: background-color 0.3s ease;
        z-index: 1000;
      }
      #posture-toggle-btn:hover {
        opacity: 0.8;
      }
      #posture-container {
        position: fixed;
        top: 0px;
        left: 120px;
        margin: 10px;
        /* background-color: rgba(0, 0, 0, 0.7); */
        color: white;
        padding: 8px 16px;
        border-radius: 5px;
        font-family: Arial, sans-serif;
        font-size: 15px;
        z-index: 1000;
        min-width: 190px;
        text-align: center;
        transition: background-color 0.3s ease;
        display: none; /* hidden initially */
      }
      #transcription-btn-text{
        color: #4caf50 !important;
      }
       #transcription-btn-text:hover{
        color: white !important;
      }
    </style>
  </head>

  <body>
    <div class="dark-light">
      <svg
        viewBox="0 0 24 24"
        stroke="currentColor"
        stroke-width="1.5"
        fill="none"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" />
      </svg>
    </div>

    <div class="app">
      <div class="wrapper">
        <div class="main">
          <div class="main__left">
            <div class="main__videos">
              <div id="video-grid"></div>
            </div>

            <div class="main__controls">
              <div class="main__controls__block">
                <div onclick="muteUnmute()" class="main__controls__button main__mute_button">
                  <i class="fas fa-microphone"></i><span>Mute</span>
                </div>
                <div onclick="playStop()" class="main__controls__button main__video_button">
                  <i class="fas fa-video"></i><span>Stop Video</span>
                </div>
                <div onclick="screenshare()" class="main__controls__button">
                  <i class="fas fa-photo-video"></i><span>ScreenShare</span>
                </div>
                <div class="main__controls__button" onclick="toggleTranscription()">
                  <i class="fas fa-photo-video"></i><span id="transcription-btn-text">Start Transcription</span>
                </div>
                <div class="main__controls__button" onclick="downloadTranscription()">
                  <i class="fas fa-photo-video"></i><span id="transcription-btn-text">Download Transcript</span>
                </div>
               
              </div>

              <div class="main__controls__block">
                <div onclick="window.location.href='/home'" class="main__controls__button">
                  <span class="leave_meeting"><a href="/home">Leave Meeting</a></span>
                </div>
              </div>
              

              <div class="main__controls__block">
                <div onclick="window.location.href='/chat/'+ROOM_ID" class="main__controls__button">
                  <span class="leave_meeting"><a>Go Back to ChatRoom</a></span>
                </div>
              </div>

              <!-- Posture toggle button and status container -->
              <div id="posture-container">
                <p id="posture-status">Status: Unknown</p>
              </div>
              <button id="posture-toggle-btn" style="background-color: #007bff; color: white;">
                Posture: OFF
              </button>
            </div>
          </div>

          <!-- speech to text section -->


          <div class="main__right">
            <div class="main__header" style="margin-top: 20px">
              <h4>Chat</h4>
            </div>
            <div class="main__chat_window"><ul class="messages"></ul></div>
            <div class="main__message_container">
              <input id="chat_message" type="text" placeholder="Type message here..." />
            </div>
          </div>
        </div>
      </div>
    </div>
   <div id="transcription-ui" style="margin-top: 10px; position: static;left: 20px; color: white;text-align: center; padding: 10px 15px;
   background: rgba(0,0,0,0.6);
     border-radius: 8px;  font-size: 14px; z-index: 999;font-style: italic;">
  <!-- <strong>Transcript (Last 20 s):</strong> -->
  <p id="transcription-text" style="margin-bottom: 0px;">-> </p>
</div>

<script>

  let model, video, postureMonitoring = false, postureGroup = [], initialized = false;

  async function initPostureMonitoring() {
    const URL = "https://teachablemachine.withgoogle.com/models/pEWSRKuO7/";
    const modelURL = URL + "model.json";
    const metadataURL = URL + "metadata.json";

    model = await tmPose.load(modelURL, metadataURL);

    video = document.createElement("video");
    video.setAttribute("playsinline", true);
    video.setAttribute("autoplay", true);
    video.setAttribute("muted", true);
    video.style.display = "none";
    document.body.appendChild(video);

    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      video.srcObject = stream;
      await new Promise((resolve) => (video.onloadedmetadata = resolve));
    } catch (err) {
      console.error("Camera setup failed:", err);
      alert("Camera access denied or unavailable.");
      return;
    }

    window.requestAnimationFrame(loop);
  }

  async function loop() {
    if (!postureMonitoring) return;
    await predict();
    window.requestAnimationFrame(loop);
  }

  async function predict() {
    if (!model || !video || video.readyState < 2) return;

    const { pose, posenetOutput } = await model.estimatePose(video);
    const prediction = await model.predict(posenetOutput);

    const highest = prediction.reduce((p, c) =>
      c.probability > p.probability ? c : p,
      prediction[0]
    );

    if (highest.probability > 0.85) postureGroup.push(highest.className);

    if (postureGroup.length >= 30) {
      const countMap = {};
      postureGroup.forEach((label) => {
        countMap[label] = (countMap[label] || 0) + 1;
      });

      let maxLabel = Object.keys(countMap).reduce((a, b) =>
        countMap[a] > countMap[b] ? a : b
      );

      let status = "Unknown",
        color = "gray";
      switch (maxLabel) {
        case "Good posture":
          status = "Good Posture";
          color = "green";
          break;
        case "Slouching":
          status = "Slouching";
          color = "orange";
          break;
        case "Leaning":
          status = "Leaning";
          color = "orange";
          break;
        case "Too close":
          status = "Too Close to Screen";
          color = "red";
          break;
        case "Not in frame":
          status = "Not in Frame";
          color = "red";
          break;
      }

      const statusEl = document.getElementById("posture-status");
      if (statusEl) {
        statusEl.innerText = `Status: ${status}`;
        statusEl.style.color = color;
      }

      console.log("Posture Status:", status); // âœ… Log to console
      postureGroup = [];
    }
  }

  async function togglePostureMonitoring() {
    postureMonitoring = !postureMonitoring;
    postureGroup = [];

    const btn = document.getElementById("posture-toggle-btn");
    const container = document.getElementById("posture-container");

    if (postureMonitoring) {
      btn.innerText = "Posture: ON";
      container.style.display = "block";

      if (!initialized) {
        try {
          await initPostureMonitoring();
          initialized = true;
        } catch (err) {
          console.warn("Camera initialization failed:", err);
          postureMonitoring = false;
          btn.innerText = "Posture: OFF";
          container.style.display = "none";
          return;
        }
      } else {
        window.requestAnimationFrame(loop);
      }
    } else {
      btn.innerText = "Posture: OFF";
      container.style.display = "none";
      if (video && video.srcObject) {
        video.srcObject.getTracks().forEach((track) => track.stop());
        video.remove();
        video = null;
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    document
      .getElementById("posture-toggle-btn")
      .addEventListener("click", togglePostureMonitoring);
  });

  // Speech to Text functionality
// â†“ Replace your current speech-to-text block with this â†“

let recognition;
let isTranscribing = false;

// two separate buffers
let fullTranscriptionText = "";
let windowTranscriptionText = "";
let transcriptClearTimer;

function toggleTranscription() {
  const btnText = document.getElementById("transcription-btn-text");

  if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
    return alert("Your browser does not support the Web Speech API");
  }

  if (!recognition) {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = false;
    recognition.lang = 'en-US';

    recognition.onresult = (event) => {
      for (let i = event.resultIndex; i < event.results.length; ++i) {
        if (event.results[i].isFinal) {
          const transcript = event.results[i][0].transcript.trim();
          // append to both buffers
          fullTranscriptionText   += transcript + "\n";
          windowTranscriptionText += transcript + " ";
          updateTranscriptUI();
        }
      }
    };

    recognition.onerror = (e) => console.error("Speech recognition error:", e.error);
  }

  if (!isTranscribing) {
    recognition.start();
    isTranscribing = true;
    btnText.innerText = "Stop Transcription";

    // every 20s clear the window buffer (UI only)
    transcriptClearTimer = setInterval(() => {
      windowTranscriptionText = "";
      updateTranscriptUI();
    }, 20_000);

  } else {
    recognition.stop();
    isTranscribing = false;
    btnText.innerText = "Start Transcription";
    clearInterval(transcriptClearTimer);
  }
}

function updateTranscriptUI() {
  const el = document.getElementById("transcription-text");
  if (el) el.innerText = windowTranscriptionText.trim();
}

function downloadTranscription() {
  if (!fullTranscriptionText.trim()) {
    return alert("No transcription to download.");
  }
  const blob = new Blob([fullTranscriptionText], { type: "text/plain" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = `meeting-transcript-${new Date().toISOString().slice(0,10)}.txt`;
  a.click();
  URL.revokeObjectURL(url);
}

</script>


  </body>
</html>
